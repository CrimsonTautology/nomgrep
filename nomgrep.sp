/**
 * vim: set ts=4 :
 * =============================================================================
 * SourceMod Nomination Grep Plugin
 * Nominate a map from a menu generated by a given search key or regular expression
 *
 * =============================================================================
 *
 *
 * Version: $Id$
 */

#include <sourcemod>
#include <mapchooser>

#pragma semicolon 1

public Plugin:myinfo =
{
	name = "Nomination Grep",
	author = "Billehs",
	description = "Provides Map Nominations based on a given search key",
	version = SOURCEMOD_VERSION,
	url = "http://www.sourcemod.net/"
};


#define MAPSTATUS_ENABLED (1<<0)
#define MAPSTATUS_DISABLED (1<<1)
#define MAPSTATUS_EXCLUDE_CURRENT (1<<2)
#define MAPSTATUS_EXCLUDE_PREVIOUS (1<<3)
#define MAPSTATUS_EXCLUDE_NOMINATED (1<<4)

public OnPluginStart()
{
	RegConsoleCmd("say", Command_Say);
	RegConsoleCmd("say_team", Command_Say);
	RegConsoleCmd("sm_nomgrep", Command_Nomgrep);
}

public Action:Command_Nomgrep(client, args){
	return Plugin_Continue;	
}
public Action:Command_Say(client, args){
	if (!client) {
		return Plugin_Continue;
	}

	decl String:text[192];
	if (!GetCmdArgString(text, sizeof(text))) {
		return Plugin_Continue;
	}
	
	new startidx = 0;
	if(text[strlen(text)-1] == '"') {
		text[strlen(text)-1] = '\0';
		startidx = 1;
	}
	
	new ReplySource:old = SetCmdReplySource(SM_REPLY_TO_CHAT);

	//TODO remove this test
	if (strcmp(text[startidx], "noms", false) == 0) {
		PrintToChatAll("[SM] This is the list of nominations, or at least it will be");
		callExternalTest();
	}

	PrintToChatAll("[SM] Hit");


	SetCmdReplySource(old);
	return Plugin_Continue;	
}

public Handle:callExternalTest(){
	new Handle:firstplugin = FindPluginByFile("firstplugin.smx");
	new Function:testMethodForward = GetFunctionByName(firstplugin, "testMethodForward");
	//new Handle:mapSearchedMenu = CreateMenu(Handler_MapSelectMenu, MENU_ACTIONS_DEFAULT|MenuAction_DrawItem|MenuAction_DisplayItem);
	new String:result;

	PrintToChatAll("[SM] Hit: |%s| it works! ", result);
	// Start function call
	Call_StartFunction(firstplugin, testMethodForward);

	// Push parameters one at a time
	Call_PushString("Waaaaaa");
	Call_PushCell(231);

	// Finish the call, get the result
	Call_Finish(result);
	PrintToChatAll("[SM] Hit: |%s| it works! ", result);
	return INVALID_HANDLE;
}
public Handle:callExternalFunctions(){
	new Handle:nominations = FindPluginByFile("nominations.smx");
	new Function:Handler_MapSelectMenu = GetFunctionByName(nominations, "Handler_MapSelectMenu");
	new Handle:mapSearchedMenu = CreateMenu(Handler_MapSelectMenu, MENU_ACTIONS_DEFAULT|MenuAction_DrawItem|MenuAction_DisplayItem);
	return mapSearchedMenu;
}

public mapSearch(client, String:searchKey[64], Handle:g_MapList, Handle:g_MapMenu){
	PrintToChatAll("[SM] TesterLoop"); //TODO remove this test
	decl String:map[64];
	new Handle:mapSearchedMenu =callExternalFunctions();

	//Loop through each item in the map list
	for (new i = 0; i < GetMenuItemCount(g_MapMenu); i++) {
		GetMenuItem(g_MapMenu, i, map, sizeof(map));		

		//If this map matches the search key, add it to the menu
		if(StrContains(map, searchKey, true) >= 0){
			PrintToChatAll("[SM] %s", map);
			AddMenuItem(mapSearchedMenu, map, map);
		}
	}

	//Try and display this new menu
	SetMenuTitle(mapSearchedMenu, "%t", "Nominate Title", client);
	DisplayMenu(mapSearchedMenu, client, MENU_TIME_FOREVER);
}
